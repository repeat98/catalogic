{"version":3,"file":"982.bundle.js","mappings":"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","sources":["webpack://taktwerk/./node_modules/pixi.js/lib/app/ResizePlugin.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/app/TickerPlugin.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/app/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/filters/FilterPipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/filters/FilterSystem.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/filters/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/graphics/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/mesh/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/particle-container/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/HTMLTextStyle.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/utils/browser/isSafari.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text-html/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text/init.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","webpack://taktwerk/./node_modules/pixi.js/lib/scene/text/utils/updateTextBounds.mjs"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      /**\n       * The HTML element or window to automatically resize the\n       * renderer's view element to match width and height.\n       * @member {Window|HTMLElement}\n       * @name resizeTo\n       * @memberof app.Application#\n       */\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @static\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @static\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { Point } from '../maths/point/Point.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    if (!this._filterStack[this._filterStackIndex]) {\n      this._filterStack[this._filterStackIndex] = this._getFilterData();\n    }\n    const filterData = this._filterStack[this._filterStackIndex];\n    this._filterStackIndex++;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      instruction.container.getFastGlobalBounds(true, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? colorTextureSource._resolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = colorTextureSource.antialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      const viewPort = renderer.renderTarget.rootViewPort;\n      const rootResolution = renderer.renderTarget.renderTarget.resolution;\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad(padding | 0);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.skip = false;\n    filterData.bounds = bounds;\n    filterData.blendRequired = blendRequired;\n    filterData.container = instruction.container;\n    filterData.filterEffect = instruction.filterEffect;\n    filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      resolution,\n      antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  pop() {\n    const renderer = this.renderer;\n    this._filterStackIndex--;\n    const filterData = this._filterStack[this._filterStackIndex];\n    if (filterData.skip) {\n      return;\n    }\n    this._activeFilterData = filterData;\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    let backTexture = Texture.EMPTY;\n    renderer.renderTarget.finishRenderPass();\n    if (filterData.blendRequired) {\n      const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n      backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n    }\n    filterData.backTexture = backTexture;\n    const filters = filterData.filterEffect.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(backTexture.source, 3);\n    renderer.globalUniforms.pop();\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(inputTexture);\n    } else {\n      let flip = filterData.inputTexture;\n      let flop = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n      TexturePool.returnTexture(flip);\n      TexturePool.returnTexture(flop);\n    }\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(backTexture);\n    }\n  }\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._filterStack[this._filterStackIndex];\n    const bounds = filterData.bounds;\n    const offset = Point.shared;\n    const previousRenderSurface = filterData.previousRenderSurface;\n    const isFinalTarget = previousRenderSurface === output;\n    let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    if (currentIndex > 0) {\n      resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n    }\n    const filterUniforms = this._filterGlobalUniforms;\n    const uniforms = filterUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      let lastIndex = this._filterStackIndex;\n      while (lastIndex > 0) {\n        lastIndex--;\n        const filterData2 = this._filterStack[this._filterStackIndex - 1];\n        if (!filterData2.skip) {\n          offset.x = filterData2.bounds.minX;\n          offset.y = filterData2.bounds.minY;\n          break;\n        }\n      }\n      outputFrame[0] = bounds.minX - offset.x;\n      outputFrame[1] = bounds.minY - offset.y;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offset.x * resolution;\n    globalFrame[1] = offset.y * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    filterUniforms.update();\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(filterUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(filterUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  _getFilterData() {\n    return {\n      skip: false,\n      inputTexture: null,\n      bounds: new Bounds(),\n      container: null,\n      filterEffect: null,\n      blendRequired: false,\n      previousRenderSurface: null\n    };\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n//# sourceMappingURL=State.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    // batchable graphics list, used to render batches\n    this._graphicsBatchesHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    this.renderer.renderableGC.addManagedHash(this, \"_graphicsBatchesHash\");\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const batches = this._graphicsBatchesHash[graphics.uid];\n    if (batches) {\n      for (let i = 0; i < batches.length; i++) {\n        const batch = batches[i];\n        batch._batcher.updateElement(batch);\n      }\n    }\n  }\n  destroyRenderable(graphics) {\n    if (this._graphicsBatchesHash[graphics.uid]) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    graphics.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (wasBatched) {\n      this._removeBatchForRenderable(graphics.uid);\n    }\n    if (gpuContext.isBatchable) {\n      this._initBatchesForRenderable(graphics);\n    }\n    graphics.batched = gpuContext.isBatchable;\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getBatchesForRenderable(graphics);\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getBatchesForRenderable(graphics) {\n    return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n  }\n  _initBatchesForRenderable(graphics) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    const batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n    if (this._graphicsBatchesHash[graphics.uid] === void 0) {\n      graphics.on(\"destroyed\", this._destroyRenderableBound);\n    }\n    this._graphicsBatchesHash[graphics.uid] = batches;\n    return batches;\n  }\n  _removeBatchForRenderable(graphicsUid) {\n    this._graphicsBatchesHash[graphicsUid].forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this._graphicsBatchesHash[graphicsUid] = null;\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n    for (const i in this._graphicsBatchesHash) {\n      this._removeBatchForRenderable(i);\n    }\n    this._graphicsBatchesHash = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this._meshDataHash = /* @__PURE__ */ Object.create(null);\n    this._gpuBatchableMeshHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n    renderer.renderableGC.addManagedHash(this, \"_gpuBatchableMeshHash\");\n    renderer.renderableGC.addManagedHash(this, \"_meshDataHash\");\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  destroyRenderable(mesh) {\n    this._meshDataHash[mesh.uid] = null;\n    const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n    if (gpuMesh) {\n      BigPool.return(gpuMesh);\n      this._gpuBatchableMeshHash[mesh.uid] = null;\n    }\n    mesh.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    this._meshDataHash[mesh.uid] = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    mesh.on(\"destroyed\", this._destroyRenderableBound);\n    return this._meshDataHash[mesh.uid];\n  }\n  _getBatchableMesh(mesh) {\n    return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = BigPool.get(BatchableMesh);\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    for (const i in this._gpuBatchableMeshHash) {\n      if (this._gpuBatchableMeshHash[i]) {\n        BigPool.return(this._gpuBatchableMeshHash[i]);\n      }\n    }\n    this._gpuBatchableMeshHash = null;\n    this._meshDataHash = null;\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._textureMatrixUpdateId = -1;\n    this._uvUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  /**\n   * Sets the texture for the batchable mesh.\n   * As it does so, it resets the texture matrix update ID.\n   * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n   * @param value - The texture to set.\n   */\n  setTexture(value) {\n    if (this.texture === value)\n      return;\n    this.texture = value;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    let uvs = options.uvs;\n    if (!uvs) {\n      if (options.positions) {\n        uvs = new Float32Array(positions.length);\n      } else {\n        uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n      }\n    }\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  /**\n   * Set the positions of the mesh.\n   * When setting the positions, its important that the uvs array is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The positions of the mesh.\n   */\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  /**\n   * Set the UVs of the mesh.\n   * Its important that the uvs array you set is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The UVs of the mesh.\n   */\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uProjectionMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uResolution:vec2<f32>,\\n  uRoundPixels:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._gpuBufferHash = /* @__PURE__ */ Object.create(null);\n    // eslint-disable-next-line max-len\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    renderable.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBufferHash[renderable.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  destroyRenderable(renderable) {\n    const buffer = this._gpuBufferHash[renderable.uid];\n    buffer.destroy();\n    this._gpuBufferHash[renderable.uid] = null;\n    renderable.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this._anchorX = options.anchor?.x;\n    this._anchorY = options.anchor?.y;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const p = this.positions;\n    const {\n      width,\n      height,\n      _leftWidth,\n      _rightWidth,\n      _topHeight,\n      _bottomHeight,\n      _anchorX,\n      _anchorY\n    } = this;\n    const w = _leftWidth + _rightWidth;\n    const scaleW = width > w ? 1 : width / w;\n    const h = _topHeight + _bottomHeight;\n    const scaleH = height > h ? 1 : height / h;\n    const scale = Math.min(scaleW, scaleH);\n    const anchorOffsetX = _anchorX * width;\n    const anchorOffsetY = _anchorY * height;\n    p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n    p[2] = p[10] = p[18] = p[26] = _leftWidth * scale - anchorOffsetX;\n    p[4] = p[12] = p[20] = p[28] = width - _rightWidth * scale - anchorOffsetX;\n    p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n    p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n    p[9] = p[11] = p[13] = p[15] = _topHeight * scale - anchorOffsetY;\n    p[17] = p[19] = p[21] = p[23] = height - _bottomHeight * scale - anchorOffsetY;\n    p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._gpuSpriteHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuSpriteHash\");\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._gpuSpriteHash[sprite.uid];\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  destroyRenderable(sprite) {\n    const batchableMesh = this._gpuSpriteHash[sprite.uid];\n    BigPool.return(batchableMesh.geometry);\n    BigPool.return(batchableMesh);\n    this._gpuSpriteHash[sprite.uid] = null;\n    sprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.setTexture(sprite._texture);\n  }\n  _getGpuSprite(sprite) {\n    return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const batchableMesh = BigPool.get(BatchableMesh);\n    batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    this._gpuSpriteHash[sprite.uid] = batchableMesh;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    sprite.on(\"destroyed\", this._destroyRenderableBound);\n    return batchableMesh;\n  }\n  destroy() {\n    for (const i in this._gpuSpriteHash) {\n      const batchableMesh = this._gpuSpriteHash[i];\n      batchableMesh.geometry.destroy();\n    }\n    this._gpuSpriteHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._tilingSpriteDataHash = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_tilingSpriteDataHash\");\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    tilingSprite.off(\"destroyed\", this._destroyRenderableBound);\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", this._destroyRenderableBound);\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n","\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      ` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      ` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor() {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    const maxTextures = getMaxTexturesPerBatch();\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._gpuBitmapText = {};\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  destroyRenderable(bitmapText) {\n    bitmapText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableByUid(bitmapText.uid);\n  }\n  _destroyRenderableByUid(renderableUid) {\n    const context = this._gpuBitmapText[renderableUid].context;\n    if (context.customShader) {\n      BigPool.return(context.customShader);\n      context.customShader = null;\n    }\n    BigPool.return(this._gpuBitmapText[renderableUid]);\n    this._gpuBitmapText[renderableUid] = null;\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = BigPool.get(SdfShader);\n      }\n    }\n    const chars = Array.from(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    let index = 0;\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = chars[index++];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = BigPool.get(Graphics);\n    this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    bitmapText.on(\"destroyed\", this._destroyRenderableBound);\n    return this._gpuBitmapText[bitmapText.uid];\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    for (const uid in this._gpuBitmapText) {\n      this._destroyRenderableByUid(uid);\n    }\n    this._gpuBitmapText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../text/utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    htmlText.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture)\n      return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(\n      htmlText.text,\n      resolution,\n      htmlText._style,\n      htmlText._getKey()\n    );\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    updateTextBounds(batchableSprite, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.transform = htmlText.groupTransform;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData, nssvg, nsxhtml };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HTMLTextStyle.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HTMLTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._activeTextures = {};\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  getTexture(options) {\n    return this._buildTexturePromise(\n      options.text,\n      options.resolution,\n      options.style\n    );\n  }\n  getManagedTexture(text, resolution, style, textKey) {\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].promise;\n    }\n    const promise = this._buildTexturePromise(text, resolution, style).then((texture) => {\n      this._activeTextures[textKey].texture = texture;\n      return texture;\n    });\n    this._activeTextures[textKey] = {\n      texture: null,\n      promise,\n      usageCount: 1\n    };\n    return promise;\n  }\n  async _buildTexturePromise(text, resolution, style) {\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    if (!activeTexture)\n      return;\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      if (activeTexture.texture) {\n        this._cleanUp(activeTexture);\n      } else {\n        activeTexture.promise.then((texture) => {\n          activeTexture.texture = texture;\n          this._cleanUp(activeTexture);\n        }).catch(() => {\n          warn(\"HTMLTextSystem: Failed to clean texture\");\n        });\n      }\n      this._activeTextures[textKey] = null;\n    }\n  }\n  _cleanUp(activeTexture) {\n    TexturePool.returnTexture(activeTexture.texture);\n    activeTexture.texture.source.resource = null;\n    activeTexture.texture.source.uploadMethodId = \"unknown\";\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\nHTMLTextSystem.defaultFontOptions = {\n  fontFamily: \"Arial\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\nimport { updateTextBounds } from '../utils/updateTextBounds.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */ Object.create(null);\n    this._destroyRenderableBound = this.destroyRenderable.bind(this);\n    this._renderer = renderer;\n    this._renderer.runners.resolutionChange.add(this);\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuText\");\n  }\n  resolutionChange() {\n    for (const i in this._gpuText) {\n      const gpuText = this._gpuText[i];\n      if (!gpuText)\n        continue;\n      const text = gpuText.batchableSprite.renderable;\n      if (text._autoResolution) {\n        text._resolution = this._renderer.resolution;\n        text.onViewUpdate();\n      }\n    }\n  }\n  validateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const newKey = text._getKey();\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(text, instructionSet) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n  }\n  updateRenderable(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (text._didTextUpdate) {\n      this._updateText(text);\n    }\n    batchableSprite._batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(text) {\n    text.off(\"destroyed\", this._destroyRenderableBound);\n    this._destroyRenderableById(text.uid);\n  }\n  _destroyRenderableById(textUid) {\n    const gpuText = this._gpuText[textUid];\n    this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[textUid] = null;\n  }\n  _updateText(text) {\n    const newKey = text._getKey();\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(text);\n    }\n    text._didTextUpdate = false;\n    updateTextBounds(batchableSprite, text);\n  }\n  _updateGpuText(text) {\n    const gpuText = this._getGpuText(text);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.texture) {\n      this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n    }\n    gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n    gpuText.currentKey = text._getKey();\n    batchableSprite.texture = gpuText.texture;\n  }\n  _getGpuText(text) {\n    return this._gpuText[text.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const gpuTextData = {\n      texture: null,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite)\n    };\n    gpuTextData.batchableSprite.renderable = text;\n    gpuTextData.batchableSprite.transform = text.groupTransform;\n    gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    gpuTextData.batchableSprite.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    this._gpuText[text.uid] = gpuTextData;\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    this._updateText(text);\n    text.on(\"destroyed\", this._destroyRenderableBound);\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(canvas, resolution = 1) {\n  const { width, height } = canvas;\n  const context = canvas.getContext(\"2d\", {\n    willReadFrequently: true\n  });\n  if (context === null) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  const imageData = context.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { nextPow2 } from '../../../maths/misc/pow2.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._activeTextures = {};\n    this._renderer = _renderer;\n  }\n  getTextureSize(text, resolution, style) {\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    let width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    let height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    width = Math.ceil(width - 1e-6);\n    height = Math.ceil(height - 1e-6);\n    width = nextPow2(width);\n    height = nextPow2(height);\n    return { width, height };\n  }\n  getTexture(options, resolution, style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style,\n        resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(\n      options\n    );\n    this._renderer.texture.initSource(texture._source);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  createTextureAndCanvas(options) {\n    const { text, style } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    const { canvas } = canvasAndContext;\n    this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n    const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n    if (style.trim) {\n      const trimmed = getCanvasBoundingBox(canvas, resolution);\n      texture.frame.copyFrom(trimmed);\n      texture.updateUvs();\n    }\n    return { texture, canvasAndContext };\n  }\n  getManagedTexture(text) {\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    const textKey = text._getKey();\n    if (this._activeTextures[textKey]) {\n      this._increaseReferenceCount(textKey);\n      return this._activeTextures[textKey].texture;\n    }\n    const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n    this._activeTextures[textKey] = {\n      canvasAndContext,\n      texture,\n      usageCount: 1\n    };\n    return texture;\n  }\n  _increaseReferenceCount(textKey) {\n    this._activeTextures[textKey].usageCount++;\n  }\n  /**\n   * Returns a texture that was created wit the above `getTexture` function.\n   * Handy if you are done with a texture and want to return it to the pool.\n   * @param texture - The texture to be returned.\n   */\n  returnTexture(texture) {\n    const source = texture.source;\n    source.resource = null;\n    source.uploadMethodId = \"unknown\";\n    source.alphaMode = \"no-premultiply-alpha\";\n    TexturePool.returnTexture(texture);\n  }\n  decreaseReferenceCount(textKey) {\n    const activeTexture = this._activeTextures[textKey];\n    activeTexture.usageCount--;\n    if (activeTexture.usageCount === 0) {\n      CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n      this.returnTexture(activeTexture.texture);\n      this._activeTextures[textKey] = null;\n    }\n  }\n  getReferenceCount(textKey) {\n    return this._activeTextures[textKey].usageCount;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   * @param text\n   * @param style\n   * @param resolution\n   * @param canvasAndContext\n   */\n  renderTextToCanvas(text, style, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    context.textBaseline = style.textBaseline;\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context, measured) : null;\n        if (style._stroke?.width) {\n          const padding = style._stroke.width * style._stroke.alignment;\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context, measured, padding);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + style.padding,\n            linePositionY + style.padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   * @param text - The text to draw\n   * @param style\n   * @param canvasAndContext\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n  destroy() {\n    this._activeTextures = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\n\n\"use strict\";\nfunction updateTextBounds(batchableSprite, text) {\n  const { texture, bounds } = batchableSprite;\n  updateQuadBounds(bounds, text._anchor, texture);\n  const padding = text._style.padding;\n  bounds.minX -= padding;\n  bounds.minY -= padding;\n  bounds.maxX -= padding;\n  bounds.maxY -= padding;\n}\n\nexport { updateTextBounds };\n//# sourceMappingURL=updateTextBounds.mjs.map\n"],"names":["ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","LOW","stop","start","Ticker","shared","oldTicker","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_activeFilterData","backTexture","filters","_getFilterData","filterData","length","skip","bounds","renderables","clear","tempMatrix","matrix","i","renderable","globalDisplayStatus","worldTransform","addBounds","getGlobalRenderableBounds","filterArea","addRect","applyMatrix","getFastGlobalBounds","filterFrameTransform","renderGroup","parentRenderGroup","cacheToLocalTransform","colorTextureSource","renderTarget","colorTexture","source","resolution","Infinity","padding","antialias","blendRequired","enabled","clipToViewport","Math","min","_resolution","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","rootResolution","fitBounds","scale","ceil","pad","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","getOptimalTexture","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","minX","y","minY","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","rootRenderTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","copyTo","Matrix","prepend","invert","texture","translate","anchor","WebGLSystem","WebGPUSystem","localUniformBit","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl","blendModeIds","normal","multiply","screen","overlay","erase","max","_State","blendMode","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","for2d","default2d","State","color32BitToUniform","abgr","out","alpha","GraphicsPipe","adaptor","_graphicsBatchesHash","create","_destroyRenderableBound","destroyRenderable","_adaptor","renderableGC","addManagedHash","validateRenderable","graphics","context","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","isBatchable","addRenderable","didViewUpdate","_rebuild","_addToBatcher","updateRenderable","batches","_batcher","updateElement","_removeBatchForRenderable","off","isRenderable","getGpuContext","customShader","groupBlendMode","localUniforms","resources","uTransformMatrix","groupTransform","uRound","_roundPixels","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BatchableGraphics","on","graphicsUid","forEach","return","GraphicsContextSystem","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","indices","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","_texture","_textureMatrixUpdateId","checkAndUpdateTexture","batcher","gpuBatchableMesh","setTexture","gpuMesh","getAdjustedBlendModeBlend","_initMeshData","_initBatchableMesh","BatchableMesh","transform","batcherName","packAsQuad","indexOffset","attributeOffset","_batch","_uvUpdateId","_topology","reset","uvs","uvBuffer","getBuffer","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","multiplyUvs","color","attributeSize","_MeshGeometry","args","defaultOptions","shrinkToFit","shrinkBuffersToFit","super","label","usage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","uTexture","gl","getBuffers","glProgram","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","wgsl","ParticleShader","Shader","GlProgram","from","fragment","gpuProgram","GpuProgram","entryPoint","WHITE","uSampler","TextureStyle","uTranslationMatrix","Color","uResolution","ParticleContainerPipe","_gpuBufferHash","_renderable","_initBuffer","ParticleBuffer","size","properties","_properties","children","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe","_PlaneGeometry","deprecation","verticesX","verticesY","build","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","_anchorX","_anchorY","updateUvs","updatePositions","p","w","scaleW","h","scaleH","anchorOffsetX","anchorOffsetY","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","gpuSprite","_getGpuSprite","_updateBatchableSprite","batchableSprite","_initGPUSprite","tilingBit","tilingBitGl","TilingSpriteShader","bits","roundPixelsBit","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","a","b","c","d","tx","ty","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_updateBatchableMesh","bindGroup","_tileTransform","_initTilingSpriteData","slice","renderableData","addressMode","applyAnchorToTexture","copyFrom","array","index","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isPowerOfTwo","BatchableSprite","_attributeStart","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","maxTextures","colorBit","generateTextureBatchBit","batchSamplers","getBatchSamplersUniformGroup","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","bitmapFont","BitmapFontManager","getFont","text","_style","distanceField","chars","Array","currentY","baseLineOffset","bitmapTextLayout","getBitmapTextLayout","offsetY","_stroke","_anchor","_x","_y","tint","applyFillAsTint","_fill","lines","line","j","charPositions","char","charData","round","xOffset","yOffset","lineHeight","initGpuText","proxyRenderable","Graphics","fontFamily","dynamicFont","Cache","dx","sqrt","dy","worldScale","abs","fontScale","baseRenderedFontSize","fontSize","distance","range","proxy","groupColor","localDisplayStatus","groupAlpha","HTMLTextPipe","_gpuText","runners","resolutionChange","gpuText","_autoResolution","onViewUpdate","htmlText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","_updateText","_destroyRenderableById","htmlTextUid","decreaseReferenceCount","_updateGpuText","catch","e","console","error","updateTextBounds","generatingTexture","getManagedTexture","gpuTextData","maxX","maxY","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","dropShadowToCSS","dropShadowStyle","setValue","setAlpha","toHexa","position","cos","angle","sin","blur","strokeToCSS","stroke","toHex","join","templates","fontWeight","fontStyle","fontVariant","letterSpacing","align","whiteSpace","wordWrapWidth","fill","breakWords","dropShadow","HTMLTextStyle","TextStyle","_cssOverrides","cssOverrides","tagStyles","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","clone","wordWrap","cssStyle","cssStyles","tagStyle","cssTagStyle","tagStyleToCSS","textStyleToCSS","addOverride","toAdd","v","includes","removeOverride","toRemove","async","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","result","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","_buildTexturePromise","textKey","_increaseReferenceCount","promise","then","usageCount","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","isArray","split","trim","extractFontFamilies","fontCSS","fontPromises","has","all","getFontCss","defaultTextStyle","measured","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","XMLSerializer","serializeToString","getSVGUrl","delay","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","test","isSafari","resource","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","clearRect","drawImage","getTemporaryCanvasFromImage","getPo2TextureFromSource","canvas","initSource","returnCanvasAndContext","activeTexture","_cleanUp","uploadMethodId","getReferenceCount","CanvasSystem","defaultFontOptions","CanvasTextPipe","textUid","canvasText","checkRow","checkColumn","top","bottom","CanvasTextSystem","getTextureSize","CanvasTextMetrics","measureText","_textKey","createTextureAndCanvas","renderTextToCanvas","trimmed","getContext","willReadFrequently","TypeError","getImageData","left","right","Rectangle","getCanvasBoundingBox","alphaMode","font","fontStringFromTextStyle","lineWidths","maxLineWidth","fontProperties","resetTransform","textBaseline","strokeStyle","lineWidth","miterLimit","lineJoin","lineCap","cap","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","fillStyle","shadowOptions","dropShadowColor","dropShadowAlpha","shadowColor","toRgbaString","dropShadowBlur","dropShadowDistance","shadowBlur","shadowOffsetX","shadowOffsetY","getCanvasFillStyle","alignment","linePositionYShift","strokeWidth","i2","ascent","_drawLetterSpacing","isStroke","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","tempBounds","emit"],"sourceRoot":""}